{"expireTime":9007200872113479000,"key":"transformer-remark-markdown-html-ast-703a1c954893ffdaa3d9992161d340e9-gatsby-remark-imagesgatsby-remark-vscodegatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-smartypantsgatsby-remark-copy-linked-filesgatsby-remark-reading-timegatsby-remark-social-cards-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As per Wikipedia, “Lazy Evaluation is an evaluation strategy which delays the evaluation of an expression until its value is needed.” And today most of the modern programming languages support Lazy Evaluation. In contrast with strict or eager evaluation, which computes values as soon as possible, lazy evaluation can certainly deliver a few benefits, such as:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":361,"offset":361}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":361,"offset":361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lazy evaluation can help to resolve circular dependencies","position":{"start":{"line":4,"column":3,"offset":365},"end":{"line":4,"column":60,"offset":422}}}],"position":{"start":{"line":4,"column":1,"offset":363},"end":{"line":4,"column":60,"offset":422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"It can provide performance enhancement by not doing calculations until needed — and they may not be done at all if the calculation is not used.","position":{"start":{"line":5,"column":3,"offset":425},"end":{"line":5,"column":146,"offset":568}}}],"position":{"start":{"line":5,"column":1,"offset":423},"end":{"line":5,"column":146,"offset":568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"It can increase the response time of applications by postponing the heavy operations until required.","position":{"start":{"line":6,"column":3,"offset":571},"end":{"line":6,"column":103,"offset":671}}}],"position":{"start":{"line":6,"column":1,"offset":569},"end":{"line":6,"column":103,"offset":671}}},{"type":"text","value":"\n"}],"position":{"start":{"line":4,"column":1,"offset":363},"end":{"line":6,"column":103,"offset":671}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, lazy evaluation has the drawback that performance may not be predictable — because you cannot say exactly when the value is going to be evaluated.","position":{"start":{"line":8,"column":1,"offset":673},"end":{"line":8,"column":156,"offset":828}}}],"position":{"start":{"line":8,"column":1,"offset":673},"end":{"line":8,"column":156,"offset":828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Scala has the following features to support lazy evaluation.","position":{"start":{"line":10,"column":1,"offset":830},"end":{"line":10,"column":61,"offset":890}}}],"position":{"start":{"line":10,"column":1,"offset":830},"end":{"line":10,"column":61,"offset":890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lazy vals\nA ","position":{"start":{"line":12,"column":4,"offset":895},"end":{"line":13,"column":3,"offset":907}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":13,"column":3,"offset":907},"end":{"line":13,"column":8,"offset":912}}},{"type":"text","value":" can be declared as lazy by using the lazy keyword. The value of val not be initialized until it is called.","position":{"start":{"line":13,"column":8,"offset":912},"end":{"line":13,"column":115,"offset":1019}}}],"position":{"start":{"line":12,"column":1,"offset":892},"end":{"line":14,"column":4,"offset":1023}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":892},"end":{"line":14,"column":4,"offset":1023}}},{"type":"text","value":"\n"},{"type":"raw","value":"<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">lazy val lval </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">10</span></span></span></code></pre>","position":{"start":{"line":15,"column":1,"offset":1024},"end":{"line":17,"column":4,"offset":1055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{"start":2},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Call by name parameters\nA method in Scala can accept calls by name parameters. The value of the parameter will only be evaluated whenever it will be used within the method.","position":{"start":{"line":19,"column":4,"offset":1060},"end":{"line":20,"column":149,"offset":1233}}}],"position":{"start":{"line":19,"column":1,"offset":1057},"end":{"line":20,"column":149,"offset":1233}}},{"type":"text","value":"\n"}],"position":{"start":{"line":19,"column":1,"offset":1057},"end":{"line":20,"column":149,"offset":1233}}},{"type":"text","value":"\n"},{"type":"raw","value":"<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">def </span><span class=\"mtk5\">method</span><span class=\"mtk1\">(n </span><span class=\"mtk7\">:=&gt;</span><span class=\"mtk1\"> Int)</span></span></span></code></pre>","position":{"start":{"line":22,"column":1,"offset":1235},"end":{"line":24,"column":4,"offset":1268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{"start":3},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lazy sequences\nSometimes, we need to allow our client to use as much as they want, and lazy sequences address the problem. Lazy ","position":{"start":{"line":26,"column":4,"offset":1273},"end":{"line":27,"column":114,"offset":1401}}},{"type":"raw","value":"<code class=\"language-text\">sequence</code>","position":{"start":{"line":27,"column":114,"offset":1401},"end":{"line":27,"column":124,"offset":1411}}},{"type":"text","value":" or ","position":{"start":{"line":27,"column":124,"offset":1411},"end":{"line":27,"column":128,"offset":1415}}},{"type":"raw","value":"<code class=\"language-text\">streams</code>","position":{"start":{"line":27,"column":128,"offset":1415},"end":{"line":27,"column":137,"offset":1424}}},{"type":"text","value":" let you define a sequence without any upper bound.","position":{"start":{"line":27,"column":137,"offset":1424},"end":{"line":27,"column":188,"offset":1475}}}],"position":{"start":{"line":26,"column":1,"offset":1270},"end":{"line":28,"column":4,"offset":1479}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":1,"offset":1270},"end":{"line":28,"column":4,"offset":1479}}},{"type":"text","value":"\n"},{"type":"raw","value":"<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">Stream.cons</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">def </span><span class=\"mtk5\">stream</span><span class=\"mtk1\">(n</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> Int)</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">Stream</span><span class=\"mtk1\">[Int] </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> Stream.</span><span class=\"mtk5\">cons</span><span class=\"mtk1\">(n, </span><span class=\"mtk5\">addStream</span><span class=\"mtk1\">(n</span><span class=\"mtk7\">+</span><span class=\"mtk4\">1</span><span class=\"mtk1\">))</span></span></span></code></pre>","position":{"start":{"line":29,"column":1,"offset":1480},"end":{"line":32,"column":4,"offset":1576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The tutorial provides a detailed hands-on example of Scala’s lazy evaluation.","position":{"start":{"line":34,"column":1,"offset":1578},"end":{"line":34,"column":78,"offset":1655}}}],"position":{"start":{"line":34,"column":1,"offset":1578},"end":{"line":34,"column":78,"offset":1655}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://www.youtube.com/embed/iromVyC0mDs\"></iframe>","position":{"start":{"line":35,"column":1,"offset":1656},"end":{"line":35,"column":66,"offset":1721}}},{"type":"text","value":"\n"},{"type":"raw","value":"<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":1,"offset":1723}}}}