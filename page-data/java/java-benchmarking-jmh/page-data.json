{"componentChunkName":"component---src-templates-post-js","path":"/java/java-benchmarking-jmh/","result":{"data":{"markdownRemark":{"id":"bc64c9f8-7f7a-5c91-949b-4f897e284f8b","excerpt":"Introduction In my previous article we established that microbenchmarking is hard with . It is not enough to surround the code in a loop with  and gather theâ€¦","html":"<h3>Introduction</h3>\n<p>In my <a href=\"/java/java-benchmarking\" target=\"_blank\">previous article</a> we established that microbenchmarking is hard with <code class=\"language-text\">jvm</code>. It is not enough to surround the code in a loop with <code class=\"language-text\">System.out.println()</code> and gather the time measurements. While benchmarking, a developer should consider warm-up cycles, JIT compilations, jvm optimizations, avoiding usual pitfalls and even more.</p>\n<p>Thankfully, OpenJDK has a great tool Java Microbenchmark Harness (JMH) that can help us generated benchmarking stats. In this article we will discuss how JMH can help us avoid the pitfalls that we have <a href=\"/java/java-benchmarking\" target=\"_blank\">discussed earlier</a>. </p>\n<h3>Getting Started with JMH</h3>\n<p>A quick way to start with JMH is to use the Maven archetype. The command below will generate a new Java project <code class=\"language-text\">benchmark</code>. The project will have <code class=\"language-text\">com/gaurav/MyBenchmark.java</code> class and <code class=\"language-text\">pom.xml</code>. The Maven <code class=\"language-text\">pom.xml</code> includes all the required dependencies to support JMH.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">mvn archetype:generate -DarchetypeGroupId=org.openjdk.jmh -DarchetypeArtifactId=jmh-java-benchmark-archetype -DinteractiveMode=false -DgroupId=com.gaurav -DartifactId=benchmark -Dversion=1.0</span></span></code></pre>\n<h3>Good Benchmarks with JMH</h3>\n<p>Let us discuss how JMH can help us to write better microbencharmks.</p>\n<ul>\n<li>JMH by default makes several warm up cycles before collecting the stats. Thus, it makes sure that the results are not completely random and <code class=\"language-text\">jvm</code> has performed optimizations.</li>\n<li><code class=\"language-text\">@benchmark</code> runs iteration over the code, and then collects the average. The more runs you make through the code, the better stats you will collect.</li>\n<li>Use <a href=\"http://javadox.com/org.openjdk.jmh/jmh-core/1.6.3/org/openjdk/jmh/infra/Blackhole.html\" target=\"_blank\"><code class=\"language-text\">Blackhole</code></a> class of JMH can avoid deal code elimination by <code class=\"language-text\">jvm</code>. If you pass the calculated results to <code class=\"language-text\">blackhole.consume()</code>, it would trick the <code class=\"language-text\">jvm</code>. <code class=\"language-text\">jvm</code> will never drop the code, thinking that <code class=\"language-text\">consume()</code> method uses the result.</li>\n</ul>\n<h3>Writing First Benchmark</h3>\n<p>Maven has already provided with us a template in <code class=\"language-text\">MyBenchmark</code> class to fill in. I am going to utilise the same class.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">package</span><span class=\"mtk1\"> </span><span class=\"mtk7\">com.gaurav</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">org.openjdk.jmh.annotations.Benchmark</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">MyBenchmark</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">void</span><span class=\"mtk1\"> </span><span class=\"mtk5\">testMethod</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// This is a demo/sample template for building your JMH benchmarks. Edit as needed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Put your benchmark code here.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>I would like to keep my first benchmark pretty simple. Let us start by iterating over all the elements of a list and sum them up using a conventional <code class=\"language-text\">for</code> loop. As discussed, I will use <code class=\"language-text\">Blackhole</code> to fool the compiler and return the result. Here, I am asking JMH to calculate the average time, using <code class=\"language-text\">@BenchmarkMode</code>, it takes to run the <code class=\"language-text\">testMethod()</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">BenchmarkMode</span><span class=\"mtk1\">(Mode.AverageTime)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">static</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> </span><span class=\"mtk5\">testMethod</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\"> blackhole) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> sum </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">int</span><span class=\"mtk1\"> i</span><span class=\"mtk7\">=</span><span class=\"mtk4\">0</span><span class=\"mtk1\">; i</span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">list.</span><span class=\"mtk5\">size</span><span class=\"mtk1\">(); i</span><span class=\"mtk7\">++</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            sum </span><span class=\"mtk7\">+=</span><span class=\"mtk1\"> list.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(i);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        blackhole.</span><span class=\"mtk5\">consume</span><span class=\"mtk1\">(sum);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> sum;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3>Compiling the JMH Project</h3>\n<p>You can compile and build the project like any other Maven project, using below Maven command:</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">mvn clean install</span></span></code></pre>\n<p>The command will create a fully executable <code class=\"language-text\">jar</code> file under <code class=\"language-text\">benchmark/target</code> directory. Please note that Maven will always generate a <code class=\"language-text\">jar</code> file named <code class=\"language-text\">benchmarks.jar</code>, regardless of the project name.</p>\n<p>Next step is to execute the <code class=\"language-text\">jar</code> using below command:</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">java -jar target/benchmarks.jar</span></span></code></pre>\n<p>It produced the below result for me. It means that test operation is taking approx. <em>0.053</em> seconds on the current hardware.  </p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># Run progress: 80.00% complete, ETA 00:01:41</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Fork: 5 of 5</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Warmup Iteration   1: 0.052 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Warmup Iteration   2: 0.051 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Warmup Iteration   3: 0.053 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Warmup Iteration   4: 0.056 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Warmup Iteration   5: 0.055 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Iteration   1: 0.054 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Iteration   2: 0.053 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Iteration   3: 0.053 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Iteration   4: 0.054 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Iteration   5: 0.059 s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Result &quot;com.example.MyBenchmark.testMethod&quot;:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  0.053 Â±(99.9%) 0.002 s/op [Average]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (min, avg, max) = (0.052, 0.053, 0.061), stdev = 0.002</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  CI (99.9%): [0.051, 0.055] (assumes normal distribution)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># Run complete. Total time: 00:08:27</span></span></code></pre>\n<h3>Benchmark Modes</h3>\n<p>In the previous example, I used <code class=\"language-text\">@BenchmarkMode(Mode.AverageTime)</code>. If you try to decompile JMH jar, you will find <code class=\"language-text\">enum Mode</code> with below values:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Modes</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">Throughput(&quot;thrpt&quot;, &quot;Throughput, ops/time&quot;)</code></td>\n<td align=\"center\">It will calculate the number of times your method can be executed with in a second</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">AverageTime(&quot;avgt&quot;, &quot;Average time, time/op&quot;)</code></td>\n<td align=\"center\">It will calculate the average time in seconds to execute the test method</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">SampleTime(&quot;sample&quot;, &quot;Sampling time&quot;)</code></td>\n<td align=\"center\">It randomly samples the time spent in test method calls</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">SingleShotTime(&quot;ss&quot;, &quot;Single shot invocation time&quot;)</code></td>\n<td align=\"center\">It works on single invocation of the method and is useful in calculating <em>cold</em> performance</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">All(&quot;all&quot;, &quot;All benchmark modes&quot;)</code></td>\n<td align=\"center\">Calculates all of the above</td>\n</tr>\n</tbody>\n</table>\n<p>The default Mode is <code class=\"language-text\">Throughput</code></p>\n<h3>Time measurement</h3>\n<p>It is evident from the console output above that calculations are in seconds. But, JMH allows you to configure the time units, using <code class=\"language-text\">@OutputTimeUnit</code> annotation. The <code class=\"language-text\">@OutputTimeUnit</code> accepts <code class=\"language-text\">java.util.concurrent.TimeUnit</code>, as shown below:</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk9 mtki\">OutputTimeUnit</span><span class=\"mtk1\">(TimeUnit.SECONDS)</span></span></span></code></pre>\n<p>The <code class=\"language-text\">TimeUnit</code> enum has following values:</p>\n<p>NANOSECONDS<br>\nMICROSECONDS<br>\nMILLISECONDS<br>\nSECONDS<br>\nMINUTES<br>\nHOURS<br>\nDAYS<br></p>\n<p>The default <code class=\"language-text\">TimeUnit</code> is <code class=\"language-text\">SECONDS</code></p>\n<h3>Configure Fork, Warmup and Iterations</h3>\n<p>The benchmark is currently executing 5 times, with 5 warmup iterations and 5 measurement iterations. JMH even allows to configure these values using <code class=\"language-text\">@Fork</code>, <code class=\"language-text\">@Warmup</code> and <code class=\"language-text\">@Measurement</code> annotations. The code snippet below would execute the test method twice, with a couple of warmup iterations and 3 measurement iterations.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk9 mtki\">Fork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">value</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk9 mtki\">Warmup</span><span class=\"mtk1\">(</span><span class=\"mtk4\">iterations</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk9 mtki\">Measurement</span><span class=\"mtk1\">(</span><span class=\"mtk4\">iterations</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">3</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><code class=\"language-text\">@Warmup</code> and <code class=\"language-text\">@Measurement</code> annotations also accepts parameters:</p>\n<ul>\n<li><code class=\"language-text\">batchSize</code> - configures the number of test method calls to be performed per operation</li>\n<li><code class=\"language-text\">time</code> - time spent for each iteration</li>\n</ul>\n<h3>Practice</h3>\n<p>You can play around to compare execution times of different <code class=\"language-text\">for</code> loops i.e. a conventional <code class=\"language-text\">for</code> loop, a <code class=\"language-text\">forEach</code> loop and a <code class=\"language-text\">stream</code> iterator. Something like:</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">private</span><span class=\"mtk1\"> </span><span class=\"mtk7\">static</span><span class=\"mtk1\"> </span><span class=\"mtk7\">final</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9 mtki\">Integer</span><span class=\"mtk1\">&gt; list </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> IntStream.</span><span class=\"mtk5\">rangeClosed</span><span class=\"mtk1\">(</span><span class=\"mtk4\">1</span><span class=\"mtk1\">, Integer.MAX_VALUE</span><span class=\"mtk7\">/</span><span class=\"mtk4\">100</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk5\">boxed</span><span class=\"mtk1\">().</span><span class=\"mtk5\">collect</span><span class=\"mtk1\">(Collectors.</span><span class=\"mtk5\">toList</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">BenchmarkMode</span><span class=\"mtk1\">(Mode.AverageTime)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">static</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> </span><span class=\"mtk5\">conventionalLoop</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\"> blackhole) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> sum </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">int</span><span class=\"mtk1\"> i</span><span class=\"mtk7\">=</span><span class=\"mtk4\">0</span><span class=\"mtk1\">; i</span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\">list.</span><span class=\"mtk5\">size</span><span class=\"mtk1\">(); i</span><span class=\"mtk7\">++</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            sum </span><span class=\"mtk7\">+=</span><span class=\"mtk1\"> list.</span><span class=\"mtk5\">get</span><span class=\"mtk1\">(i);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        blackhole.</span><span class=\"mtk5\">consume</span><span class=\"mtk1\">(sum);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> sum;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">BenchmarkMode</span><span class=\"mtk1\">(Mode.AverageTime)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">static</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> </span><span class=\"mtk5\">enhancedForLoop</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\"> blackhole) throws InterruptedException {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> sum </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9 mtki\">int</span><span class=\"mtk1\"> integer </span><span class=\"mtk7\">:</span><span class=\"mtk1\"> list) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            sum </span><span class=\"mtk7\">+=</span><span class=\"mtk1\"> integer;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        blackhole.</span><span class=\"mtk5\">consume</span><span class=\"mtk1\">(sum);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> sum;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk9 mtki\">BenchmarkMode</span><span class=\"mtk1\">(Mode.AverageTime)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">public</span><span class=\"mtk1\"> </span><span class=\"mtk7\">static</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> </span><span class=\"mtk5\">streamMap</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\"> blackhole) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9 mtki\">double</span><span class=\"mtk1\"> sum </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> list.</span><span class=\"mtk5\">stream</span><span class=\"mtk1\">().</span><span class=\"mtk5\">mapToDouble</span><span class=\"mtk1\">(Integer</span><span class=\"mtk7\">::</span><span class=\"mtk1\">doubleValue).</span><span class=\"mtk5\">sum</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        blackhole.</span><span class=\"mtk5\">consume</span><span class=\"mtk1\">(sum);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> sum;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3>Conclusion</h3>\n<p>In this article we have gone through a hands-on example of creating a JMH project. We have seen how can we configure our JMH project to suit our needs. You can refer to <a href=\"https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples\" target=\"_blank\">JMH Github Samples</a> for more in depth examples.</p>\n<p>We have seen that JMH is a <code class=\"language-text\">jvm</code> tool. In the <a href=\"/java/scala-benchmarking-jmh/\" target=\"_blank\">next article</a> we will try to explore if it can help us with other <code class=\"language-text\">jvm</code> based languages.</p>\n<p><strong>Reference</strong><br>\n<sup><a href=\"https://github.com/openjdk/jmh\" target=\"_blank\">JMH Github</a></sup><br>\n<sup><a href=\"https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples\" target=\"_blank\">JMH Github Samples</a></sup><br>\n<sup><a href=\"http://javadox.com/org.openjdk.jmh/jmh-core/0.8/org/openjdk/jmh/annotations/Mode.html\" target=\"_blank\">JMH Javadox - Mode</a></sup><br>\n<sup><a href=\"http://javadox.com/org.openjdk.jmh/jmh-core/1.7/org/openjdk/jmh/annotations/OutputTimeUnit.html\" target=\"_blank\">JMH Javadox - OutputTimeUnit</a></sup><br>\n<sup><a href=\"http://javadox.com/org.openjdk.jmh/jmh-core/0.9/org/openjdk/jmh/annotations/Fork.html\" target=\"_blank\">JMH Javadox - Fork</a></sup><br></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Java Microbenchmark Harness (JMH)","date":"April 10, 2021","subtitle":"Creating the first JMH project","description":"A quick hands-on lesson to learn about Java Microbenchmark Harness (JMH). The article helps you get started and configure JMH project.","tags":["java","tutorial","programming","microbenchark","2021"]}}},"pageContext":{"slug":"/java/java-benchmarking-jmh/","previous":{"frontmatter":{"title":"Benchmarking Scala Code with JMH","subtitle":"Creating the first Java Microbenchmark Harness (JMH) project using SBT","description":"A quick hands-on lesson to integrate Java Microbenchmark Harness (JMH) with SBT.","tags":["java","tutorial","programming","microbenchark","2021"]},"fields":{"slug":"/java/scala-benchmarking-jmh/"}},"next":{"frontmatter":{"title":"What is Microbenchmarking","subtitle":"Microbenchmarking with jvm is hard and should be avoided","description":"An introduction to Microbenchmarking, when to use it and pitfalls to avoid.","tags":["java","programming","microbenchark","2021"]},"fields":{"slug":"/java/java-benchmarking/"}}}},"staticQueryHashes":["786959418","852313850"]}