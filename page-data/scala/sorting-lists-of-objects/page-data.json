{"componentChunkName":"component---src-templates-post-js","path":"/scala/sorting-lists-of-objects/","result":{"data":{"markdownRemark":{"id":"4e28abe3-ecdc-55d4-9bd0-5dd557fa0f52","excerpt":"One of the most common ADT that a developer uses in their day-to-day coding is List. And one of the most common operations a developer performs on a list is to…","html":"<p>One of the most common ADT that a developer uses in their day-to-day coding is List. And one of the most common operations a developer performs on a list is to order it or sort it with given criteria. In this article, I will focus on sorting a list of objects in Scala.</p>\n<p>Mainly, there are two ways of sorting a list in Scala, i.e.</p>\n<ul>\n<li><code class=\"language-text\">sortWith</code></li>\n<li><code class=\"language-text\">sortBy</code></li>\n</ul>\n<p>Let’s consider the popular example of sorting IMDB ratings. Below is my IMDB class.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">case </span><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">ImdbRating</span><span class=\"mtk1\">(name: String, ratings: Double)</span></span></span></code></pre>\n<p>Here is a list of the top five rated movies of all time (source).</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val ratings </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk5\">List</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">ImdbRating</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;The Shawshank Redemption&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">9.3</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">ImdbRating</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;The Godfather &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">9.2</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">ImdbRating</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;The Dark Knight&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">9.1</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">ImdbRating</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;The Godfather: Part II&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">9.0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk5\">ImdbRating</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;The Lord of the Rings: The Return of the King&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">8.9</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>If you observe closely, the above list is ordered by ratings, but my requirement is to order movies by length of their names.</p>\n<h3>sortWith</h3>\n<p>First, I will try to order the list using <code class=\"language-text\">sortWith</code>. <code class=\"language-text\">sortWith</code> sorts a given list based on the comparison function that is provided to it. It is a stable sort, which means that an item will not lose its original position if two elements are equal. Here is the code to sort the list by length of names:</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val sortedRatings </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> ratings.</span><span class=\"mtk5\">sortWith</span><span class=\"mtk1\">(_.name.size </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> _.name.size)</span></span></span></code></pre>\n<p>If I want to order the list in descending order, then all I need to do is to reverse the <code class=\"language-text\">&lt;</code> operator. </p>\n<h3>sortBy</h3>\n<p>Another way to order the above list is to use <code class=\"language-text\">sortBy</code>. <code class=\"language-text\">sortBy</code> sorts a given sequence according to the implicitly defined natural <code class=\"language-text\">Ordering</code>. Like <code class=\"language-text\">sortWith</code>, this sort is stable as well. Here is the code to order the list.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val sortedRatings </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> ratings.</span><span class=\"mtk5\">sortBy</span><span class=\"mtk1\">(_.name.size)</span></span></span></code></pre>\n<p>There is a third way to sort the list of objects that I have not discussed here, and that is to extend the <code class=\"language-text\">Ordered</code> trait. The trait forces you to implement the <code class=\"language-text\">compare</code> method. <code class=\"language-text\">Ordered</code> trait is somewhat like <code class=\"language-text\">Comparable</code> interfaces in java.</p>\n<p>If you want more details about sorting or Ordered trait, you can refer to the following videos in which I provide additional examples.</p>\n<iframe src=\"https://www.youtube.com/embed/hjY_mC7dPxc\"></iframe>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Sorting Lists of Objects in Scala","date":"November 14, 2019","subtitle":"How to best sort lists in Scala.","description":"Learn how to set sort the lists in Scala. The blog talks about the usage of sortWith and sortBy along with coding examples","tags":["scala","functional programming","programming","tutorial","2019"]}}},"pageContext":{"slug":"/scala/sorting-lists-of-objects/","previous":{"frontmatter":{"title":"What is Microbenchmarking","subtitle":"Microbenchmarking with jvm is hard and should be avoided","description":"An introduction to Microbenchmarking, when to use it and pitfalls to avoid.","tags":["Java","jvm","Java Microbenchmark Harness","Microbenchark","2021"]},"fields":{"slug":"/java/java-benchmarking/"}},"next":{"frontmatter":{"title":"Repeated Method Parameters in Scala","subtitle":"Let's see how Scala supports variable arguments and repeated method parameters","description":"Let's see how Scala supports variable arguments and repeated method parameters, and the conditions to consider when using them.","tags":["scala","functional programming","programming","tutorial","2018"]},"fields":{"slug":"/scala/scala-repeated-method-parameters/"}}}},"staticQueryHashes":["786959418","852313850"]}