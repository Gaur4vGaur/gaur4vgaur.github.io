---
title: Benchmarking Scala with JMH
subtitle: Creating the first Java Microbenchmark Harness (JMH) project using SBT
description: A quick hands-on lesson to integrate Java Microbenchmark Harness (JMH) with SBT.
tags: ["Java", "jvm", "Java Microbenchmark Harness", "Microbenchark", "2021"]
date: 2021-04-12
---

### Introduction
We identified in the <a href="/java/java-benchmarking-jmh/" target="_blank">previous post</a> that JMH is a `jvm` tool that can help benchmark the source code. Till now, we have used it to benchmark the Java code. But, since it is a `jvm` it must be capable of benchmarking other `jvm` based languages. In this post, I will pick up Scala, which is a `jvm` based language, to benchmark the code.

### Integrate JMH with SBT
Let us first start by creating a new Scala project with SBT. I will use the below `giter8` template to produce the project structure.

```shell
sbt new scala/scala-seed.g8 --name=benchmarks
```

The next step is to configure JMH with the new project.

The next step is to add JMH plugin into the new project. To do so, create a new file `plugins.sbt` under the `project` directory and add below content to `plugins.sbt`.

```shell
addSbtPlugin("pl.project13.scala" % "sbt-jmh" % "0.4.0")
```

We must enable the above plugin through `build.sbt`.

```scala
enablePlugins(JmhPlugin)
```

Now, we can start coding experimenting with benchmarks. We are going to use the same JMH annotations as we have seen in the <a href="/java/java-benchmarking-jmh/" target="_blank">previous post</a>. The `giter8` template has created `example` package inside directory `src/main/scala`. I am going to use the same package in this example. I will create a new class `MyBenchmark.scala` in `example` package. Similar to the java example, I am going to benchmark the code to sum all elements inside a `list`.

```groovy
import org.openjdk.jmh.annotations.Benchmark
import org.openjdk.jmh.infra.Blackhole

class MyBenchmark {

  @Benchmark
  def testMethod(blackHole: Blackhole): Double = {
    val list: List[Int] = List.range(1, Integer.MAX_VALUE/100)
    val sum: Double = list.sum
    blackHole.consume(sum)
    sum
  }
}
```

### Compiling JMH project in SBT


