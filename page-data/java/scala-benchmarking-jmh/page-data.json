{"componentChunkName":"component---src-templates-post-js","path":"/java/scala-benchmarking-jmh/","result":{"data":{"markdownRemark":{"id":"01bace2c-5f6e-5cf4-92ee-8c3f952bdfdc","excerpt":"Introduction We identified in the previous post that JMH is a  tool that can help benchmark the source code. Till now, we have used it to benchmark the Java…","html":"<h3>Introduction</h3>\n<p>We identified in the <a href=\"/java/java-benchmarking-jmh/\" target=\"_blank\">previous post</a> that JMH is a <code class=\"language-text\">jvm</code> tool that can help benchmark the source code. Till now, we have used it to benchmark the Java code. But, since it is a <code class=\"language-text\">jvm</code> it must be capable of benchmarking other <code class=\"language-text\">jvm</code> based languages. In this post, I will pick up Scala, which is a <code class=\"language-text\">jvm</code> based language, to benchmark the code.</p>\n<h3>Integrate JMH with SBT</h3>\n<p>Let us first start by creating a new Scala project with SBT. I will use the below <code class=\"language-text\">giter8</code> template to produce the project structure.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">sbt new scala/scala-seed.g8 --name=benchmarks</span></span></code></pre>\n<p>The next step is to configure JMH with the new project. We can achieve it by adding JMH plugin. Create a new file <code class=\"language-text\">plugins.sbt</code> under the <code class=\"language-text\">project</code> directory and add the below content to <code class=\"language-text\">plugins.sbt</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">addSbtPlugin(&quot;pl.project13.scala&quot; % &quot;sbt-jmh&quot; % &quot;0.4.0&quot;)</span></span></code></pre>\n<p>We must enable the above plugin through <code class=\"language-text\">build.sbt</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"scala\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">enablePlugins(JmhPlugin)</span></span></code></pre>\n<p>Now, we can start experimenting with benchmarks. We are going to use the same JMH annotations as we have seen in the <a href=\"/java/java-benchmarking-jmh/\" target=\"_blank\">previous post</a>. The <code class=\"language-text\">giter8</code> template has created <code class=\"language-text\">example</code> package inside directory <code class=\"language-text\">src/main/scala</code>. I am going to rename <code class=\"language-text\">example</code> package. I will create a new class <code class=\"language-text\">MyBenchmark.scala</code> in the new package. Similar to the java example, I am going to benchmark the code to sum all elements inside a <code class=\"language-text\">list</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"groovy\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">org.openjdk.jmh.annotations.Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">org.openjdk.jmh.infra.Blackhole</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">MyBenchmark</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">@Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">testMethod</span><span class=\"mtk1\">(</span><span class=\"mtk10 mtki\">blackHole</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\">): </span><span class=\"mtk9 mtki\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val </span><span class=\"mtk4\">list</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">List</span><span class=\"mtk1\">[</span><span class=\"mtk9 mtki\">Int</span><span class=\"mtk1\">] </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">List</span><span class=\"mtk7\">.</span><span class=\"mtk1\">range(</span><span class=\"mtk4\">1</span><span class=\"mtk1\">, </span><span class=\"mtk9 mtki\">Integer</span><span class=\"mtk7\">.</span><span class=\"mtk4\">MAX_VALUE</span><span class=\"mtk7\">/</span><span class=\"mtk4\">100</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    val </span><span class=\"mtk4\">sum</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> list</span><span class=\"mtk7\">.</span><span class=\"mtk1\">sum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    blackHole</span><span class=\"mtk7\">.</span><span class=\"mtk1\">consume(sum)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    sum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>As we have observed in <a href=\"/java/java-benchmarking/\" target=\"_blank\">earlier posts</a>, I am returning a value from <code class=\"language-text\">testMethod</code>. Additionally, I am using <code class=\"language-text\">BlackHole</code> to avoid <code class=\"language-text\">jvm</code> optimization.</p>\n<h3>Executing JMH project in SBT</h3>\n<p>Unlike, maven which creates a JMH jar to execute the project, SBT can perform the operations from its console. Use the below command to both compile and execute the project. You can also use <code class=\"language-text\">sbt jmh:compile</code>, to compile the project.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"scala\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">sbt jmh:run</span></span></code></pre>\n<p>I find it quite handy and quick, as compared to maven. Once executed, you can observe <code class=\"language-text\">jmh</code> log lines</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] running (fork) org.openjdk.jmh.Main</span></span></code></pre>\n<p>Similar to what we have seen <a href=\"/java/java-benchmarking-jmh/\" target=\"_blank\">earlier</a>, <code class=\"language-text\">jmh</code>, by default, will:</p>\n<ul>\n<li>execute 5 warm up iterations,</li>\n<li>execute 5 fork iterations,</li>\n<li>the mode will be <code class=\"language-text\">Throughput</code>, and </li>\n<li>The default <code class=\"language-text\">TimeUnit</code> will be <code class=\"language-text\">SECONDS</code></li>\n</ul>\n<p>It produced the below result for me. It means that it is executing approx <em>69342 operations per sec</em>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"shell\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Run progress: 80.00% complete, ETA 00:01:40</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Fork: 5 of 5</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   1: 58060.100 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   2: 64730.638 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   3: 69149.250 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   4: 63715.739 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   5: 66027.235 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   1: 70228.232 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   2: 60943.758 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   3: 63144.950 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   4: 63729.494 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   5: 63557.685 ops/s</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Result &quot;com.gaurav.MyBenchmark.testMethod&quot;:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info]   69342.082 ±(99.9%) 4236.598 ops/s [Average]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info]   (min, avg, max) = (54795.094, 69342.082, 75332.645), stdev = 5655.737</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info]   CI (99.9%): [65105.484, 73578.681] (assumes normal distribution)</span></span></code></pre>\n<h3>Benchmark Configuration</h3>\n<p>Now, the project is up and running, the next step is to configure the <code class=\"language-text\">jmh</code>. We can configure the project for:</p>\n<ul>\n<li>Modes - Throughput, AverageTime, SampleTime, SingleShotTime and All</li>\n<li>Time Units - NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS</li>\n<li>Iterations - Fork iterations, Warmup iterations and Measurements iterations</li>\n</ul>\n<p>Below is my sample code. I have configured my code to use <code class=\"language-text\">AverageTime</code>, to run a couple of fork, warmup and measurement iterations.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"groovy\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">org.openjdk.jmh.annotations.{Benchmark,</span><span class=\"mtk8\"> </span><span class=\"mtk7\">BenchmarkMode,</span><span class=\"mtk8\"> </span><span class=\"mtk7\">Fork,</span><span class=\"mtk8\"> </span><span class=\"mtk7\">Measurement,</span><span class=\"mtk8\"> </span><span class=\"mtk7\">Mode,</span><span class=\"mtk8\"> </span><span class=\"mtk7\">Warmup}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> </span><span class=\"mtk7\">org.openjdk.jmh.infra.Blackhole</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">class</span><span class=\"mtk1\"> </span><span class=\"mtk5 mtku\">MyBenchmark</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">@Benchmark</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">@BenchmarkMode</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Array</span><span class=\"mtk1\">(</span><span class=\"mtk9 mtki\">Mode.AverageTime</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">@Fork</span><span class=\"mtk1\">(</span><span class=\"mtk4\">value</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">@Warmup</span><span class=\"mtk1\">(</span><span class=\"mtk4\">iterations</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">@Measurement</span><span class=\"mtk1\">(</span><span class=\"mtk4\">iterations</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk9 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk5\">testMethod</span><span class=\"mtk1\">(</span><span class=\"mtk10 mtki\">blackHole</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">Blackhole</span><span class=\"mtk1\">): </span><span class=\"mtk9 mtki\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        val </span><span class=\"mtk4\">list</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">List</span><span class=\"mtk1\">[</span><span class=\"mtk9 mtki\">Int</span><span class=\"mtk1\">] </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9 mtki\">List</span><span class=\"mtk7\">.</span><span class=\"mtk1\">range(</span><span class=\"mtk4\">1</span><span class=\"mtk1\">, </span><span class=\"mtk4\">1000</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        val </span><span class=\"mtk4\">sum</span><span class=\"mtk1\">: </span><span class=\"mtk9 mtki\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> list</span><span class=\"mtk7\">.</span><span class=\"mtk1\">sum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        blackHole</span><span class=\"mtk7\">.</span><span class=\"mtk1\">consume(sum)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        sum</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Below is my output. As you can observe in the highlighted lines below, <code class=\"language-text\">jmh</code> first prints the summary of the configuration. The feature is quite handy. You can go through to make sure <code class=\"language-text\">jmh</code> is doing the right thing. </p>\n<pre class=\"grvsc-container grvsc-has-line-highlighting monokai\" data-language=\"shell\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line grvsc-line-highlighted\"><span class=\"grvsc-source\">[info] # Warmup: 2 iterations, 10 s each</span></span>\n<span class=\"grvsc-line grvsc-line-highlighted\"><span class=\"grvsc-source\">[info] # Measurement: 2 iterations, 10 s each</span></span>\n<span class=\"grvsc-line grvsc-line-highlighted\"><span class=\"grvsc-source\">[info] # Timeout: 10 min per iteration</span></span>\n<span class=\"grvsc-line grvsc-line-highlighted\"><span class=\"grvsc-source\">[info] # Threads: 1 thread, will synchronize iterations</span></span>\n<span class=\"grvsc-line grvsc-line-highlighted\"><span class=\"grvsc-source\">[info] # Benchmark mode: Average time, time/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Benchmark: com.gaurav.MyBenchmark.testMethod</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Run progress: 0.00% complete, ETA 00:01:20</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Fork: 1 of 2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   1: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   2: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   1: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   2: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Run progress: 50.00% complete, ETA 00:00:40</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Fork: 2 of 2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   1: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Warmup Iteration   2: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   1: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Iteration   2: ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] Result &quot;com.gaurav.MyBenchmark.testMethod&quot;:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info]   ≈ 10⁻⁵ s/op</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[info] # Run complete. Total time: 00:01:20</span></span></code></pre>\n<h3>Conclusion</h3>\n<p>In this article we have seen that <code class=\"language-text\">jmh</code> not only works with Java, but also with Scala, which is <code class=\"language-text\">jvm</code> language. We have gone through a hand-on example of configuring a new Scala project with <code class=\"language-text\">jmh</code> plugin. You can refer to <a href=\"https://github.com/ktoso/sbt-jmh/tree/master/plugin/src/sbt-test/sbt-jmh/run/src/main/scala/org/openjdk/jmh/samples\" target=\"_blank\">JMH Github Scala Samples</a> for more in depth examples.</p>\n<p><strong>Reference</strong><br>\n<sup><a href=\"https://github.com/openjdk/jmh\" target=\"_blank\">JMH Github</a></sup><br>\n<sup><a href=\"https://github.com/ktoso/sbt-jmh/tree/master/plugin/src/sbt-test/sbt-jmh/run/src/main/scala/org/openjdk/jmh/samples\" target=\"_blank\">JMH Github Scala Samples</a></sup><br>\n<sup><a href=\"http://javadox.com/org.openjdk.jmh/jmh-core/0.8/overview-summary.html\" target=\"_blank\">JMH Javadox</a></sup><br></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtku {\n    text-decoration: underline;\n    text-underline-position: under;\n  }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk5 { color: #A6E22E; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk10 { color: #FD971F; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .mtk8 { color: #F8F8F0; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Benchmarking Scala Code with JMH","date":"April 18, 2021","subtitle":"Creating the first Java Microbenchmark Harness (JMH) project using SBT","description":"A quick hands-on lesson to integrate Java Microbenchmark Harness (JMH) with SBT.","tags":["scala","tutorial","programming","microbenchark","2021"]}}},"pageContext":{"slug":"/java/scala-benchmarking-jmh/","previous":null,"next":{"frontmatter":{"title":"Java Microbenchmark Harness (JMH)","subtitle":"Creating the first JMH project","description":"A quick hands-on lesson to learn about Java Microbenchmark Harness (JMH). The article helps you get started and configure JMH project.","tags":["java","tutorial","programming","microbenchark","2021"]},"fields":{"slug":"/java/java-benchmarking-jmh/"}}}},"staticQueryHashes":["786959418","852313850"]}