{"expireTime":9007200872112995000,"key":"transformer-remark-markdown-ast-091144835ebcc375966738542aab2856-gatsby-remark-imagesgatsby-remark-vscodegatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-smartypantsgatsby-remark-copy-linked-filesgatsby-remark-reading-timegatsby-remark-social-cards-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Before we begin discussing closures in Scala, let us have a quick look at a function. The function literal bill below accepts only one input parameter: ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":153,"offset":153},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">netBill</code>","position":{"start":{"line":2,"column":153,"offset":153},"end":{"line":2,"column":162,"offset":162},"indent":[]}},{"type":"text","value":". However, the function calculates the final bill by adding a service charge to ","position":{"start":{"line":2,"column":162,"offset":162},"end":{"line":2,"column":242,"offset":242},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">netBill</code>","position":{"start":{"line":2,"column":242,"offset":242},"end":{"line":2,"column":251,"offset":251},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":2,"column":251,"offset":251},"end":{"line":2,"column":252,"offset":252},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":252,"offset":252},"indent":[]}},{"type":"html","lang":"java","meta":null,"value":"<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val bill </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> (netBill</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> Double) </span><span class=\"mtk7\">=&gt;</span><span class=\"mtk1\"> netBill</span><span class=\"mtk7\">*</span><span class=\"mtk1\">(</span><span class=\"mtk4\">1</span><span class=\"mtk1\"> </span><span class=\"mtk7\">+</span><span class=\"mtk1\"> serviceCharge</span><span class=\"mtk7\">/</span><span class=\"mtk4\">100</span><span class=\"mtk1\">)</span></span></span></code></pre>","position":{"start":{"line":4,"column":1,"offset":254},"end":{"line":6,"column":4,"offset":329},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So if we try to compile the above function, Scala is going to complain that it does not know anything about ","position":{"start":{"line":7,"column":1,"offset":330},"end":{"line":7,"column":109,"offset":438},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">serviceCharge</code>","position":{"start":{"line":7,"column":109,"offset":438},"end":{"line":7,"column":124,"offset":453},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":7,"column":124,"offset":453},"end":{"line":7,"column":125,"offset":454},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":330},"end":{"line":7,"column":125,"offset":454},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We have one bounded variable: ","position":{"start":{"line":9,"column":1,"offset":456},"end":{"line":9,"column":31,"offset":486},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">netBill</code>","position":{"start":{"line":9,"column":31,"offset":486},"end":{"line":9,"column":40,"offset":495},"indent":[]}},{"type":"text","value":". It is bound to the function call and takes its value from whatever is provided to the function. But ","position":{"start":{"line":9,"column":40,"offset":495},"end":{"line":9,"column":142,"offset":597},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">serviceCharge</code>","position":{"start":{"line":9,"column":142,"offset":597},"end":{"line":9,"column":157,"offset":612},"indent":[]}},{"type":"text","value":" is a free variable, and the function literal does not provide it with any value.","position":{"start":{"line":9,"column":157,"offset":612},"end":{"line":9,"column":238,"offset":693},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":456},"end":{"line":9,"column":238,"offset":693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to execute our function literal, we need to provide a value to ","position":{"start":{"line":11,"column":1,"offset":695},"end":{"line":11,"column":73,"offset":767},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">serviceCharge</code>","position":{"start":{"line":11,"column":73,"offset":767},"end":{"line":11,"column":88,"offset":782},"indent":[]}},{"type":"text","value":" outside the function ","position":{"start":{"line":11,"column":88,"offset":782},"end":{"line":11,"column":110,"offset":804},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bill</code>","position":{"start":{"line":11,"column":110,"offset":804},"end":{"line":11,"column":116,"offset":810},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":116,"offset":810},"end":{"line":11,"column":117,"offset":811},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":695},"end":{"line":11,"column":117,"offset":811},"indent":[]}},{"type":"html","lang":"java","meta":null,"value":"<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val serviceCharge </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">14</span></span></span></code></pre>","position":{"start":{"line":13,"column":1,"offset":813},"end":{"line":15,"column":4,"offset":847},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And now, if we redefine our ","position":{"start":{"line":17,"column":1,"offset":849},"end":{"line":17,"column":29,"offset":877},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bill</code>","position":{"start":{"line":17,"column":29,"offset":877},"end":{"line":17,"column":35,"offset":883},"indent":[]}},{"type":"text","value":" function again, then Scala will be quite happy with our declaration.","position":{"start":{"line":17,"column":35,"offset":883},"end":{"line":17,"column":104,"offset":952},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":849},"end":{"line":17,"column":104,"offset":952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The function value created at runtime from this function literal bill is called a closure because we capture the binding of its free variable by closing the function. In the above example, we have captured the value of ","position":{"start":{"line":19,"column":1,"offset":954},"end":{"line":19,"column":220,"offset":1173},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">serviceCharge</code>","position":{"start":{"line":19,"column":220,"offset":1173},"end":{"line":19,"column":235,"offset":1188},"indent":[]}},{"type":"text","value":" as 14.","position":{"start":{"line":19,"column":235,"offset":1188},"end":{"line":19,"column":242,"offset":1195},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":954},"end":{"line":19,"column":242,"offset":1195},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The video tutorial highlights the concept in more detail with few more examples:","position":{"start":{"line":21,"column":1,"offset":1197},"end":{"line":21,"column":81,"offset":1277},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1197},"end":{"line":21,"column":81,"offset":1277},"indent":[]}},{"type":"html","value":"<iframe src=\"https://www.youtube.com/embed/WQOGQ6ytmdw\"></iframe>","position":{"start":{"line":23,"column":1,"offset":1279},"end":{"line":23,"column":66,"offset":1344},"indent":[]}},{"type":"html","value":"<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>"}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":1,"offset":1345}}}}