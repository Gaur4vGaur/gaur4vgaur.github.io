{"componentChunkName":"component---src-templates-post-js","path":"/scala/closures-in-scala/","result":{"data":{"markdownRemark":{"id":"acca84a5-8dc4-5204-bd10-853bffbd77ce","excerpt":"Before we begin discussing closures in Scala, let us have a quick look at a function. The function literal bill below accepts only one input parameterâ€¦","html":"<p>Before we begin discussing closures in Scala, let us have a quick look at a function. The function literal bill below accepts only one input parameter: <code class=\"language-text\">netBill</code>. However, the function calculates the final bill by adding a service charge to <code class=\"language-text\">netBill</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val bill </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> (netBill</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> Double) </span><span class=\"mtk7\">=&gt;</span><span class=\"mtk1\"> netBill</span><span class=\"mtk7\">*</span><span class=\"mtk1\">(</span><span class=\"mtk4\">1</span><span class=\"mtk1\"> </span><span class=\"mtk7\">+</span><span class=\"mtk1\"> serviceCharge</span><span class=\"mtk7\">/</span><span class=\"mtk4\">100</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>So if we try to compile the above function, Scala is going to complain that it does not know anything about <code class=\"language-text\">serviceCharge</code>.</p>\n<p>We have one bounded variable: <code class=\"language-text\">netBill</code>. It is bound to the function call and takes its value from whatever is provided to the function. But <code class=\"language-text\">serviceCharge</code> is a free variable, and the function literal does not provide it with any value.</p>\n<p>In order to execute our function literal, we need to provide a value to <code class=\"language-text\">serviceCharge</code> outside the function <code class=\"language-text\">bill</code>.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">val serviceCharge </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">14</span></span></span></code></pre>\n<p>And now, if we redefine our <code class=\"language-text\">bill</code> function again, then Scala will be quite happy with our declaration.</p>\n<p>The function value created at runtime from this function literal bill is called a closure because we capture the binding of its free variable by closing the function. In the above example, we have captured the value of <code class=\"language-text\">serviceCharge</code> as 14.</p>\n<p>The video tutorial highlights the concept in more detail with few more examples:</p>\n<iframe src=\"https://www.youtube.com/embed/WQOGQ6ytmdw\"></iframe>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Closures in Scala","date":"February 16, 2018","subtitle":"If you're trying Scala out, see how closures work to bind free variables to function literals with some sample code.","description":"This quick hands-on lesson on closures in Scala. It binds free variables to function literals. The article also provides closure code snippet"}}},"pageContext":{"slug":"/scala/closures-in-scala/","previous":{"frontmatter":{"title":"Lazy Evaluation in Scala","subtitle":"A quick tour of lazy evaluation to cover its benefits and drawbacks in Scala.","description":"This quick lesson in lazy evaluation covers its benefits and drawbacks your options to implement it in your Scala code."},"fields":{"slug":"/scala/lazy-evaluation/"}},"next":{"frontmatter":{"title":"Partial Functions in Scala","subtitle":"Interested in learning some finer points of the Scala language? Read on to get a quick overview of Scala's partial functions, and how they aid in development.","description":"This quick hands-on lesson on partial functions in Scala and how they help in development. The article also provides partial function code snippet"},"fields":{"slug":"/scala/partial-functions/"}}}},"staticQueryHashes":["786959418","852313850"]}